# Generated by Django 2.2.6 on 2019-11-01 18:25

import datetime

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_submitted', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('user_submitted', models.CharField(default='uos3', editable=False, max_length=64)),
                ('confirmed_uplink', models.BooleanField(default=False, editable=False)),
                ('date_uplink',
                 models.DateTimeField(blank=True, default=datetime.datetime(1970, 1, 1, 0, 0), editable=False)),
                ('tx_enable', models.BooleanField(choices=[(0, 'Off'), (1, 'On')], default=True)),
                ('tx_interval', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(255)])),
                ('tx_interval_downlink', models.IntegerField(choices=[(0, '0 ms'), (50, '500 ms'), (60, '600 ms'), (70, '700 ms'), (80, '800 ms'), (90, '900 ms'), (100, '1000 ms'), (150, '1500 ms'), (200, '2000 ms')])),
                ('tx_datarate', models.IntegerField(choices=[(0, '0.25 kbps'), (3, '0.5 kbps'), (6, '1 kbps'), (9, '3 kbps'), (12, '6 kbps')])),
                ('tx_power', models.IntegerField(choices=[(0, '10 mW'), (3, '50 mW'), (6, '100 mW'), (9, '200 mW'), (12, '300 mW')])),
                ('batt_overtemp', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(255)])),
                ('obc_overtemp', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(255)])),
                ('pa_overtemp', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(255)])),
                ('low_voltage_threshold', models.FloatField(validators=[django.core.validators.MinValueValidator(0),
                                                                        django.core.validators.MaxValueValidator(
                                                                            25.5)])),
                ('low_voltage_recovery', models.FloatField(validators=[django.core.validators.MinValueValidator(0),
                                                                       django.core.validators.MaxValueValidator(
                                                                           25.5)])),
                ('eps_health_acquisition_interval', models.PositiveIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(65535)])),
                ('check_health_acquisition_interval', models.PositiveIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(65535)])),
                ('imu_acquisition_interval', models.PositiveIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(65535)])),
                ('imu_sample_count', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(16)])),
                ('imu_sample_interval', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(10),
                                django.core.validators.MaxValueValidator(2550)])),
                ('imu_gyro_bandwidth', models.IntegerField(
                    choices=[(0, '5Hz'), (1, '10Hz'), (2, '20Hz'), (3, '41Hz'), (4, '92Hz'), (5, '184Hz'), (6, '250Hz'),
                             (7, '3600Hz')])),
                ('imu_gyro_measurement_range',
                 models.IntegerField(choices=[(0, '+250dps'), (1, '+500dps'), (2, '+1000dps'), (3, '+2000dps')])),
                ('gps_acquisition_interval', models.PositiveIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(65535)])),
                ('gps_sample_count', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(16)])),
                ('gps_sample_interval', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(10),
                                django.core.validators.MaxValueValidator(2550)])),
                ('image_acquisition_profile', models.IntegerField(choices=[(0, '1600x1200'), (1, '640x480')])),
                ('power_rail_1', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=True)),
                ('power_rail_3', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=True)),
                ('power_rail_5', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=True)),
                ('power_rail_6', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=True)),
                ('imu_accel_enabled', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('imu_gyro_enabled', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('imu_magno_enabled', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('silent_flag', models.BooleanField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('time', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0),
                                                            django.core.validators.MaxValueValidator(4294967295)])),
                ('operational_mode', models.IntegerField(choices=[(0, 'Deployment Phases'), (1, 'Nominal Operations'), (3, 'Safe Mode')])),
                ('self_test', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('reset_power_rail_1', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('reset_power_rail_2', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('reset_power_rail_3', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('reset_power_rail_4', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('reset_power_rail_5', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('reset_power_rail_6', models.IntegerField(choices=[(0, 'Off'), (1, 'On')], default=False)),
                ('telemetry_go_silent', models.PositiveSmallIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(32768)])),
                ('downlink_stop_time', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0),
                                                                          django.core.validators.MaxValueValidator(
                                                                              4294967295)])),
                ('image_acquisition_time', models.BigIntegerField(
                    validators=[django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(4294967295)])),
            ],
        ),
    ]
